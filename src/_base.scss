/*
	reinimax' CSS framework
	-----------------------
	Contents:
		1. CSS reset by Eric Meyer
		2. Variables
		3. General stuff & Typography
		4. Grid-System
		5. Styles for form-elements
		6. Utilities
*/

@use "sass:color";

/* -------------------------------------------
	1. CSS reset by Eric Meyer 
------------------------------------------- */

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}


/* -------------------------------------------
	2. Variables 
------------------------------------------- */

/* Breakpoints */
$breakpoint-s: 576px;
$breakpoint-m: 768px;
$breakpoint-l: 1000px;
$breakpoint-xl: 1200px;

/* Typography */
$font-serif: 100% Georgia, 'Times New Roman', Times, serif !default;
$font-sans-serif: 100% 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !default;

/* Colors */
/* I  leave it for now with this. The practicality will have to be tested*/
$dark: rgb(31, 31, 31) !default;
$light: rgb(255, 255, 255) !default;

$primary-color: rgb(175, 0, 0) !default;
$primary-color-light: color.adjust($primary-color, $saturation: -50%, $lightness: 25%);
$primary-color-dark: color.adjust($primary-color, $saturation: -60%, $lightness: 10%);

$secondary-color: rgb(0, 70, 0) !default;
$secondary-color-light: color.adjust($primary-color, $saturation: -50%, $lightness: 25%);
$secondary-color-dark: color.adjust($primary-color, $saturation: -60%, $lightness: 10%);

$complementary-color: color.complement($primary-color);
$complementary-light: color.adjust($complementary-color, $saturation: -50%, $lightness: 25%);
$complementary-dark: color.adjust($complementary-color, $saturation: -60%, $lightness: 10%);

$text-primary: $dark !default;
$text-secondary: color.adjust($dark, $lightness: 20%) !default;
$text-primary-light: $light !default;
$text-secondary-light: color.adjust($light, $alpha: -0.3) !default;
$link-default: rgb(0, 0, 238) !default;
$link-hover: rgb(0, 0, 238) !default;
$link-active: rgb(238, 0, 0) !default;
$link-visited: rgb(128, 0, 128) !default;

$bg-primary-light: $light !default;
$bg-primary-dark: $dark !default;

$input-default: color.adjust($dark, $lightness: 50%);

/* Aspect ratio for the image bottom hack */
/*
	1:1 -> 100%
 	16:9 -> 56.25%
	4:3 -> 75%
	3:2 -> 66.66%
*/
$aspect-ratio: 56.25% !default;

/* -------------------------------------------
	3. General stuff & Typography 
------------------------------------------- */

/* Making everything border-box */
html {
	box-sizing: border-box;
}

*,
*:before,
*:after {
	box-sizing: inherit;
}

/* Sizing images */
img {
	max-width: 100%;
	height: auto;
}

/* Typography */

/* Overwriting line-height and setting default font and color */
body {
  line-height: 1.5;
  font: $font-sans-serif;
  color: $text-primary;
}

/* Setting sizes of h-elements*/
h1 {font-size: 2.5rem;}
h2 {font-size: 2rem;}
h3 {font-size: 1.75rem;}
h4 {font-size: 1.5rem;}
h5 {font-size: 1.25rem;}
h6 {font-size: 1.1rem;}


/* -------------------------------------------
	3. Grid-System 
------------------------------------------- */

.grid-container {
	display: grid;
	grid-template-columns: repeat(12, 1fr);
}

/* Default classes. They work with the smalles screensizes and up until
another, responsive, class is added */
.col-12 {grid-column-start: span 12;}
.col-11 {grid-column-start: span 11;}
.col-10 {grid-column-start: span 10;}
.col-9 {grid-column-start: span 9;}
.col-8 {grid-column-start: span 8;}
.col-7 {grid-column-start: span 7;}
.col-6 {grid-column-start: span 6;}
.col-5 {grid-column-start: span 5;}
.col-4 {grid-column-start: span 4;}
.col-3 {grid-column-start: span 3;}
.col-2 {grid-column-start: span 2;}

/* Responsive classes */
@media (min-width: $breakpoint-s) {
	.col-s-12 {grid-column-start: span 12;}
	.col-s-11 {grid-column-start: span 11;}
	.col-s-10 {grid-column-start: span 10;}
	.col-s-9 {grid-column-start: span 9;}
	.col-s-8 {grid-column-start: span 8;}
	.col-s-7 {grid-column-start: span 7;}
	.col-s-6 {grid-column-start: span 6;}
	.col-s-5 {grid-column-start: span 5;}
	.col-s-4 {grid-column-start: span 4;}
	.col-s-3 {grid-column-start: span 3;}
	.col-s-2 {grid-column-start: span 2;}
}

@media (min-width: $breakpoint-m) {
	.col-m-12 {grid-column-start: span 12;}
	.col-m-11 {grid-column-start: span 11;}
	.col-m-10 {grid-column-start: span 10;}
	.col-m-9 {grid-column-start: span 9;}
	.col-m-8 {grid-column-start: span 8;}
	.col-m-7 {grid-column-start: span 7;}
	.col-m-6 {grid-column-start: span 6;}
	.col-m-5 {grid-column-start: span 5;}
	.col-m-4 {grid-column-start: span 4;}
	.col-m-3 {grid-column-start: span 3;}
	.col-m-2 {grid-column-start: span 2;}
}

@media (min-width: $breakpoint-l) {
	.col-l-12 {grid-column-start: span 12;}
	.col-l-11 {grid-column-start: span 11;}
	.col-l-10 {grid-column-start: span 10;}
	.col-l-9 {grid-column-start: span 9;}
	.col-l-8 {grid-column-start: span 8;}
	.col-l-7 {grid-column-start: span 7;}
	.col-l-6 {grid-column-start: span 6;}
	.col-l-5 {grid-column-start: span 5;}
	.col-l-4 {grid-column-start: span 4;}
	.col-l-3 {grid-column-start: span 3;}
	.col-l-2 {grid-column-start: span 2;}
}

@media (min-width: $breakpoint-xl) {
	.col-xl-12 {grid-column-start: span 12;}
	.col-xl-11 {grid-column-start: span 11;}
	.col-xl-10 {grid-column-start: span 10;}
	.col-xl-9 {grid-column-start: span 9;}
	.col-xl-8 {grid-column-start: span 8;}
	.col-xl-7 {grid-column-start: span 7;}
	.col-xl-6 {grid-column-start: span 6;}
	.col-xl-5 {grid-column-start: span 5;}
	.col-xl-4 {grid-column-start: span 4;}
	.col-xl-3 {grid-column-start: span 3;}
	.col-xl-2 {grid-column-start: span 2;}
}

/* -------------------------------------------
	5. Styles for form-elements 
------------------------------------------- */

@mixin form-element($bg: transparent, $color: $dark) {
	background-color: $bg;
	border: 1px solid $color;
	border-radius: 4px;
	padding: 0.5rem 1rem;
	margin: 0.5rem;
}

button {
	cursor: pointer;
	line-height: 1;
	@include form-element();
}

input {
	@include form-element($color: $input-default);
}

/* -------------------------------------------
	6. Utilities 
------------------------------------------- */

/* Fixed width-container that scales together with the breakpoints */
.container-fixed {
	max-width: 100%;
	@media (min-width: $breakpoint-s) {
		max-width: $breakpoint-s - 36px !important;
	}
	@media (min-width: $breakpoint-m) {
		max-width: $breakpoint-m - 48px !important;
	}
	@media (min-width: $breakpoint-l) {
		max-width: $breakpoint-l - 40px !important;
	}
	@media (min-width: $breakpoint-xl) {
		max-width: $breakpoint-xl - 60px !important;
	}
}

/* Classes for hiding and showing elements */
.hidden {display: none};
.visible-block {display: block;}
.visible-flex {display: flex;}

/* Turning a ul into a navbar. The class is supposed to be added to the ul */
/* there may be better solutions, but I chose float for now, also because it leaves no
gaps like display: inline-block */
.nav-list > li {
	float: left;
	list-style-type: none;
	padding: 0.5em;
	a {
		padding: 0.5em;	
	}
}

.nav-list:after {
  display: block;
	content: "";
	height: 0;
	clear: left;
}

/* 
  Using the "padding-bottom hack" to ensure all the images in a gallery have the same aspect ratio.
  See: https://www.smashingmagazine.com/2013/09/responsive-images-performance-problem-case-study/
  The images need to be wrapped by the image-wrapper class.
  For this to work, the image-wrapper itself must reside in a containing block because its padding
  is relative to its CONTAINING block! That means setting a width directly on the image-wrapper
  will break the aspect ratio.
*/
.image-wrapper {
	position: relative;
	width: 100%;
    height: 0;
    padding-bottom: $aspect-ratio;
	overflow: hidden;
  }

.image-wrapper img {
	position: absolute;
    top: 0;
    left: 0;
    width: 100%;
	height: 100%;
  }
